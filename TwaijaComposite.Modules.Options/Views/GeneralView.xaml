<UserControl
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:common="clr-namespace:TwaijaComposite.Modules.Common;assembly=TwaijaComposite.Modules.Common"
    xmlns:control="clr-namespace:TwaijaComposite.Modules.Controls;assembly=TwaijaComposite.Modules.Controls"
    xmlns:System="clr-namespace:System;assembly=mscorlib" x:Class="TwaijaComposite.Modules.Options.Views.GeneralView"
    mc:Ignorable="d" Foreground="{DynamicResource mainforegroundbrushkey}"
    d:DesignHeight="300" d:DesignWidth="400">
    
     <UserControl.Resources>
        <Style x:Key="CheckBoxStyle" TargetType="CheckBox">
            <Setter Property="Background" Value="#FF448DCA"/>
            <Setter Property="Foreground" Value="#FF000000"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="Padding" Value="4,1,0,0"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush">
                <Setter.Value>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                        <GradientStop Color="#FFA3AEB9" Offset="0"/>
                        <GradientStop Color="#FF8399A9" Offset="0.375"/>
                        <GradientStop Color="#FF718597" Offset="0.375"/>
                        <GradientStop Color="#FF617584" Offset="1"/>
                    </LinearGradientBrush>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <ColorAnimation Duration="0" To="#7FFFFFFF" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#CCFFFFFF" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#F2FFFFFF" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Pressed">
                                        <Storyboard>
                                            <ColorAnimation Duration="0" To="#6BFFFFFF" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#C6FFFFFF" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#EAFFFFFF" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#F4FFFFFF" Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#FF6DBDD1" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#FF6DBDD1" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#FF6DBDD1" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                            <ColorAnimation Duration="0" To="#FF6DBDD1" Storyboard.TargetProperty="(Shape.Stroke).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="BoxMiddle"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To=".55" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="contentPresenter"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CheckIcon"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked"/>
                                    <VisualState x:Name="Indeterminate"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="FocusStates">
                                    <VisualState x:Name="Focused"/>
                                    <VisualState x:Name="Unfocused"/>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="ValidationStates">
                                    <VisualState x:Name="Valid"/>
                                    <VisualState x:Name="InvalidUnfocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ValidationErrorElement">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="InvalidFocused">
                                        <Storyboard>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="ValidationErrorElement">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <Visibility>Visible</Visibility>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen" Storyboard.TargetName="validationTooltip">
                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                    <DiscreteObjectKeyFrame.Value>
                                                        <System:Boolean>True</System:Boolean>
                                                    </DiscreteObjectKeyFrame.Value>
                                                </DiscreteObjectKeyFrame>
                                            </ObjectAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Ellipse x:Name="BoxMiddle" Height="auto"  StrokeThickness="1" Width="auto">
                                    <Ellipse.Fill>
                                        <LinearGradientBrush EndPoint="0.64,0.88" StartPoint="0.62,0.15">
                                            <GradientStop Color="#FFFFFFFF" Offset="0.013"/>
                                            <GradientStop Color="#F9FFFFFF" Offset="0.375"/>
                                            <GradientStop Color="#EAFFFFFF" Offset="0.603"/>
                                            <GradientStop Color="#D8FFFFFF" Offset="1"/>
                                        </LinearGradientBrush>
                                    </Ellipse.Fill>
                                    <Ellipse.Stroke>
                                        <LinearGradientBrush EndPoint=".5,1" StartPoint=".5,0">
                                            <GradientStop Color="#FFFFFFFF" Offset="1"/>
                                            <GradientStop Color="#FFFFFFFF" Offset="0"/>
                                            <GradientStop Color="#FFFFFFFF" Offset="0.375"/>
                                            <GradientStop Color="#FFFFFFFF" Offset="0.375"/>
                                        </LinearGradientBrush>
                                    </Ellipse.Stroke>
                                </Ellipse>
                                <Path x:Name="CheckIcon" Data="M102.03442,598.79645 L105.22962,597.78918 L106.78825,600.42358 C106.78825,600.42358 108.51028,595.74304 110.21724,593.60419 C112.00967,591.35822 114.89314,591.42316 114.89314,591.42316 C114.89314,591.42316 112.67844,593.42645 111.93174,594.44464 C110.7449,596.06293 107.15683,604.13837 107.15683,604.13837 z" Fill="#FF333333" FlowDirection="LeftToRight" Height="10" Margin="1,1,0,1.5" Opacity="0" Stretch="Fill" Width="10.5"/>
                                <Border x:Name="ValidationErrorElement" BorderBrush="#FFDB000C" BorderThickness="1" CornerRadius="1" Margin="1" ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Visibility="Collapsed">
                                    <ToolTipService.ToolTip>
                                        <ToolTip x:Name="validationTooltip" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ValidationToolTipTemplate}">
                                            <ToolTip.Triggers>
                                                <EventTrigger RoutedEvent="Canvas.Loaded">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsHitTestVisible" Storyboard.TargetName="validationTooltip">
                                                                <DiscreteObjectKeyFrame KeyTime="0">
                                                                    <DiscreteObjectKeyFrame.Value>
                                                                        <System:Boolean>true</System:Boolean>
                                                                    </DiscreteObjectKeyFrame.Value>
                                                                </DiscreteObjectKeyFrame>
                                                            </ObjectAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                            </ToolTip.Triggers>
                                        </ToolTip>
                                    </ToolTipService.ToolTip>
                                    <Grid Background="Transparent" HorizontalAlignment="Right" Height="10" Margin="0,-4,-4,0" VerticalAlignment="Top" Width="10">
                                        <Path Data="M 1,0 L5,0 A 2,2 90 0 1 7,2 L7,6 z" Fill="#FFDC000C" Margin="0,3,0,0"/>
                                        <Path Data="M 0,0 L2,0 L 7,5 L7,7" Fill="#ffffff" Margin="0,3,0,0"/>
                                    </Grid>
                                </Border>
                            </Grid>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="LocationListBoxItemStyle" TargetType="ListBoxItem">
            <Setter Property="Padding" Value="3"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Background" Value="#A58B8B8B"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Grid x:Name="grid" >
                            <!--<Grid.Projection>
                                <PlaneProjection/>
                            </Grid.Projection>-->
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal"/>
                                    <VisualState x:Name="MouseOver">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To=".35" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="fillColor"/>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Disabled">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To=".55" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="contentPresenter"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="SelectionStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition From="Unselected" GeneratedDuration="0" To="Selected">
                                            <!--<Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Projection).(PlaneProjection.RotationX)" Storyboard.TargetName="grid">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                    <SplineDoubleKeyFrame KeyTime="0:0:0.2" Value="-35" KeySpline="0.5,0,0.51,1"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>-->
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Unselected"/>
                                    <VisualState x:Name="Selected">
                                        <Storyboard>
                                            <DoubleAnimation Duration="0" To=".75" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="fillColor2"/>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                                <VisualStateGroup x:Name="FocusStates">
                                    <VisualState x:Name="Focused"/>
                                    <VisualState x:Name="Unfocused"/>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Rectangle Fill="{TemplateBinding Background}" Margin="1"></Rectangle>
                            <Rectangle x:Name="fillColor" Margin="1" Fill="White" IsHitTestVisible="False" Opacity="0" RadiusY="1" RadiusX="1"/>
                            <Rectangle x:Name="fillColor2" Margin="1" Fill="White" IsHitTestVisible="False" Opacity="0" RadiusY="1" RadiusX="1"/>
                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="Center"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Height" Value="80"/>
            <Setter Property="Width" Value="80"/>
        </Style>
        <Style x:Key="NotificationListboxStyle" TargetType="{x:Type ListBox}">
        	<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        	<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        	<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ListBox}">
        				<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
        					<ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
        						<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
        					</ScrollViewer>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Background" TargetName="Bd" Value="#80000000"/>
        					</Trigger>
        					<Trigger Property="IsGrouping" Value="true">
        						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ThemeListBoxContainerStyle" TargetType="{x:Type ListBoxItem}">
        	<Setter Property="Background" Value="Transparent"/>
        	<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        	<Setter Property="Padding" Value="4"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ListBoxItem}">
        				<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
        					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsSelected" Value="true">
        						<Setter Property="Background" TargetName="Bd" Value="Black"/>
        						<Setter Property="Foreground" Value="White"/>
        					</Trigger>
        					<MultiTrigger>
        						<MultiTrigger.Conditions>
        							<Condition Property="IsSelected" Value="true"/>
        							<Condition Property="Selector.IsSelectionActive" Value="false"/>
        						</MultiTrigger.Conditions>
        						<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        					</MultiTrigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
    </UserControl.Resources>
        <Grid x:Name="LayoutRoot" Background="Transparent">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!--<Grid.ColumnDefinitions>
            <ColumnDefinition Width="100" />
            <ColumnDefinition Width="auto" />
        </Grid.ColumnDefinitions>-->
            <!--<StackPanel Orientation="Vertical"  HorizontalAlignment="Left">
                <CheckBox FontFamily="Segoe UI Light" Margin="8"  FontSize="24" Foreground="{DynamicResource mainforegroundbrushkey}"    HorizontalAlignment="Left" x:Name="showmessagesentdialog" IsChecked="{Binding ShowMessageSentDialog,Mode=TwoWay}"  Content="Display Message Delivered ?" VerticalContentAlignment="Center" />
            </StackPanel>-->
            <CheckBox FontFamily="Segoe UI Light" FontSize="24" Margin="8" Foreground="{DynamicResource mainforegroundbrushkey}"  HorizontalAlignment="Left" Grid.Row="1" IsChecked="{Binding PromptUserSelectionDialog,Mode=TwoWay}" Content="Prompt user to selected a preferred user for every action?" VerticalContentAlignment="Center" />
        <StackPanel Orientation="Vertical" Grid.Row="2" Margin="8">
            <TextBlock Margin="0,0,2,0" FontFamily="Segoe UI Light" FontSize="16" >Maximum Number of Items in a Column</TextBlock>
            <ComboBox FontFamily="Segoe UI" FontSize="12" Width="300" Height="25"  FontWeight="Thin" Foreground="LightGray" HorizontalAlignment="Left"  ItemsSource="{Binding MaximumNumberOfItemsInASingleColumnAvailableOptions}" SelectedItem="{Binding SelectedMaxNumberOfItemsInASingleColumn, Mode=TwoWay}"  HorizontalContentAlignment="Left" Style="{DynamicResource SlickComboboxStyle}"/>
        </StackPanel>
        <Grid Margin="8" Grid.Row="3" HorizontalAlignment="Left">
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Rectangle  Grid.RowSpan="3" Fill="#A7000000" RadiusX="3" RadiusY="3"></Rectangle>
                <TextBlock Margin="4" Text="Retweet Style" FontFamily="Segoe UI Light" FontSize="24"  FontWeight="Thin" Foreground="WhiteSmoke"></TextBlock>
                <TextBlock Style="{StaticResource smalltext}"  Foreground="WhiteSmoke" TextAlignment="Center" Grid.Row="1" Width="350" Margin="5,5,5,5" HorizontalAlignment="Center">New retweet style copies the tweet and appends an RT to the original text while Old Retweets original text as is a.</TextBlock>

                <StackPanel Margin="4" Orientation="Horizontal" Grid.Row="2" >
                    <RadioButton  FontFamily="Segoe UI Light" FontSize="14"  FontWeight="Thin" Foreground="White"  HorizontalAlignment="Left"  IsChecked="{Binding IsOldRetweetStyle,Mode=TwoWay}" Content="Old"  />
                    <RadioButton FontFamily="Segoe UI Light" Margin="2,0" IsChecked="True" FontSize="14" Foreground="White"  Content="New" ></RadioButton>
                </StackPanel>
            </Grid>
        <WrapPanel Orientation="Vertical" Grid.Row="4" >
            <TextBlock FontFamily="Segoe UI Light" FontSize="24"  FontWeight="Thin">Notifications</TextBlock>
            <CheckBox FontFamily="Segoe UI Light" IsChecked="{Binding IsNotificationsEnabled}" Name="notificationscheckbox"  FontSize="14" Foreground="{DynamicResource mainforegroundbrushkey}" VerticalContentAlignment="Center">Enabled</CheckBox>
            <ListBox Background="{x:Null}" Margin="8" FontFamily="Segoe UI SemiLight" Width="162" IsEnabled="{Binding ElementName=notificationscheckbox, Path=IsChecked}" SelectedItem="{Binding SelectedPosition,Mode=TwoWay}"  ItemsSource="{Binding AvailablePositions}" ItemContainerStyle="{StaticResource LocationListBoxItemStyle}" BorderThickness="0" BorderBrush="{x:Null}" HorizontalAlignment="Left" Style="{DynamicResource NotificationListboxStyle}">
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Vertical" MaxHeight="160" HorizontalAlignment="Stretch" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
            </ListBox>
        </WrapPanel>
        <GroupBox FontFamily="Segoe UI Light" BorderBrush="{DynamicResource mainforegroundbrushkey}" FontSize="24" Header="Theme" HorizontalAlignment="Left" Grid.Row="5" BorderThickness="0.5" Width="450">
            <ListBox  ItemsSource="{Binding Themes}" Background="Transparent" SelectedValue="{Binding SelectedTheme,Mode=TwoWay}" BorderBrush="Transparent" ItemContainerStyle="{DynamicResource ThemeListBoxContainerStyle}" >
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Rectangle Fill="{Binding ColorValue}" Height="20" Width="20" Stroke="White" StrokeThickness="1.2"></Rectangle>
                            <TextBlock FontSize="16" Text="{Binding DisplayName}"></TextBlock>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox></GroupBox>

        </Grid>
</UserControl>
